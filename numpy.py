# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/153k2_qdM7eg2KHeUEip58ILQ6Ucruvn_
"""

import numpy as np

a = np.array([1, 2, 3])  # Create a rank 1 array
print(type(a), a.shape, a[0], a[1], a[2])
a[0] = 5                 # Change an element of the array
print(a)

b = np.array([[1,2,3],[4,5,6]])   # Create a rank 2 array
print(b)

b[0]

print(b.shape)
print(b[0, 0], b[0, 1], b[1, 0])

a = np.zeros((2,2))  # Create an array of all zeros
print(a)

b = np.ones((1,2))   # Create an array of all ones
print(b)

c = np.full((2,2), 7) # Create a constant array
print(c)

d = np.eye(2)        # Create a 2x2 identity matrix
print(d)

e = np.random.random((2,2)) # Create an array filled with random values
print(e)

"""# ARRAY INDEXING"""

import numpy as np
a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])
b = a[:2, 1:3]
print(b)

print(a[0, 1])
b[0, 0] = 77    # b[0, 0] is the same piece of data as a[0, 1]
print(a[0, 1])

print(a)
print(b)

row_r1 = a[1, :]    # Rank 1 view of the second row of a
row_r2 = a[1:2, :]  # Rank 2 view of the second row of a
row_r3 = a[[1], :]  # Rank 2 view of the second row of a
print(row_r1, row_r1.shape)
print(row_r2, row_r2.shape)
print(row_r3, row_r3.shape)

col_r1 = a[:, 1]
col_r2 = a[:, 1:2]
print(col_r1, col_r1.shape)
print()
print(col_r2, col_r2.shape)

a = np.array([[1,2], [3, 4], [5, 6]])
print(a.shape)
print(a[[0, 1, 2], [0, 1, 0]])
print(np.array([a[0, 0], a[1, 1], a[2, 0]]))

print(a[[0, 0], [1, 1]])

print(np.array([a[0, 1], a[0, 1]]))

a = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
print(a)

b = np.array([0, 2, 0, 1])
print(b)

print(a[:, b])

a[np.arange(4), b] += 10
print(a)

"""# Boolean array"""

import numpy as np

a = np.array([[1,2], [3, 4], [5, 6]])
print(a)

bool_idx = (a > 2)  # Find the elements of a that are bigger than 2;
                    # this returns a numpy array of Booleans of the same
                    # shape as a, where each slot of bool_idx tells
                    # whether that element of a is > 2.

print(bool_idx)

print(a[bool_idx])

print(a[a > 2])

"""# Data types"""

x = np.array([1, 2])  # Let numpy choose the datatype
y = np.array([1.0, 2.0])  # Let numpy choose the datatype
z = np.array([1, 2], dtype=np.int64)  # Force a particular datatype

print(x.dtype, y.dtype, z.dtype)

"""# Array math"""

x = np.array([[1,2],[3,4]], dtype=np.float64)
y = np.array([[5,6],[7,8]], dtype=np.float64)

print(x + y)
print(np.add(x, y))

print(x - y)
print(np.subtract(x, y))

print(x * y)
print(np.multiply(x, y))

print(x / y)
print(np.divide(x, y))

print(np.sqrt(x))

x = np.array([[1,2],[3,4]])
y = np.array([[5,6],[7,8]])

v = np.array([9,10])
w = np.array([11, 12])
print(v.shape, w.shape)
print(v.dot(w))
print(np.dot(v, w))

print(x.dot(y))

z=np.eye(2)
print(x.dot(z))

print(x.dot(v))
print(np.dot(x, v))
print(x @ v)

print(x.dot(y))
print(np.dot(x, y))
print(x @ y)

x = np.array([[1,2],[3,4]])

print(np.sum(x))

print(x)
print(np.sum(x, axis=0))  # Compute sum of each column; prints "[4 6]"
print(np.sum(x, axis=1))  # Compute sum of each row; prints "[3 7]"

print(x)
print("transpose\n", x.T)

v = np.array([[1,2,3]])
print(v.shape)
print(v )
print("transpose\n", v.T)

"""# Broadcasting"""

x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
v = np.array([1, 0, 1])
y = np.empty_like(x)   # Create an empty matrix with the same shape as x

# Add the vector v to each row of the matrix x with an explicit loop
for i in range(4):
    y[i, :] = x[i, :] + v

print(y)

vv = np.tile(v, (4, 1))  # Stack 4 copies of v on top of each other
print(vv)                # Prints "[[1 0 1]

y = x + vv
print(y)

import numpy as np

x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
v = np.array([1, 0, 1])
y = x + v
print(y)

v = np.array([1,2,3])
w = np.array([4,5])

print(np.reshape(v, (3, 1)) * w)

x = np.array([[1,2,3], [4,5,6]])

print(x + v)

print((x.T + w).T)

print(x + np.reshape(w, (2, 1)))

print(x * 2)